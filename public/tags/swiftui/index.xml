<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SwiftUI on SwiSwiSwift</title>
    <link>https://en.swiswiswift.com/tags/swiftui/</link>
    <description>Recent content in SwiftUI on SwiSwiSwift</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 09 Feb 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://en.swiswiswift.com/tags/swiftui/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Aligning Views like UICollectionView in SwiftUI</title>
      <link>https://en.swiswiswift.com/2020-02-09/</link>
      <pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://en.swiswiswift.com/2020-02-09/</guid>
      <description>How to make it look like a UICollectionView in SwiftUI. It&#39;s easy to use a library called Q-Mobile/QGrid . I wrote this with reference to QGrid.</description>
    </item>
    
    <item>
      <title>Displaying a Firestore image in SwiftUI</title>
      <link>https://en.swiswiswift.com/2020-02-08/</link>
      <pubDate>Sat, 08 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://en.swiswiswift.com/2020-02-08/</guid>
      <description>How to display a Firestore image in SwiftUI. UIImage can be easily displayed using SDWebImage, but SwiftUI can&#39;t do that. I used SDWebImage/SDWebImageSwiftUI to write</description>
    </item>
    
    <item>
      <title>Detecting changes to the SwiftUI Toggle</title>
      <link>https://en.swiswiswift.com/2020-02-05/</link>
      <pubDate>Wed, 05 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://en.swiswiswift.com/2020-02-05/</guid>
      <description>Detects changes to the SwiftUI toggle and executes a print statement.
Reference: How can I trigger an action when a swiftUI toggle() is toggled?
 </description>
    </item>
    
    <item>
      <title>Creating a multi-line picker in SwiftUI</title>
      <link>https://en.swiswiswift.com/2020-01-14/</link>
      <pubDate>Tue, 14 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://en.swiswiswift.com/2020-01-14/</guid>
      <description>This is a way to create a multi-line picker like UIPickerView. The usability is quite different from UIPickerView and I was puzzled.
Reference: Multi-Component Picker (UIPickerView) in SwiftUI</description>
    </item>
    
    <item>
      <title>Don&#39;t show the Label in the SwiftUI Picker</title>
      <link>https://en.swiswiswift.com/2020-01-13/</link>
      <pubDate>Mon, 13 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://en.swiswiswift.com/2020-01-13/</guid>
      <description>How not to display the Label in the SwiftUI Picker. It is possible to do so by setting labelsHidden. 参考: How to hide</description>
    </item>
    
    <item>
      <title>Displaying a Picker in SwiftUI</title>
      <link>https://en.swiswiswift.com/2020-01-12/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://en.swiswiswift.com/2020-01-12/</guid>
      <description>This is a sample to display the picker in SwiftUI. In case of multiple lines, click here. Creating a multi-line picker in SwiftUI
Reference: Is there a way to call a function when a SwiftUI Picker selection changes?</description>
    </item>
    
    <item>
      <title>Calling the transition source method from the view of the screen transition destination in SwiftUI</title>
      <link>https://en.swiswiswift.com/2020-01-11/</link>
      <pubDate>Sat, 11 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://en.swiswiswift.com/2020-01-11/</guid>
      <description>This is a sample that calls the transition source method from the view of the screen transition destination in SwiftUI. I used delegate, but it might be better to write in Combine.</description>
    </item>
    
    <item>
      <title>Displaying an alert in SwiftUI</title>
      <link>https://en.swiswiswift.com/2019-12-20/</link>
      <pubDate>Fri, 20 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://en.swiswiswift.com/2019-12-20/</guid>
      <description>How to display an alert in SwiftUI. It is written quite differently from UIAlertController. The @State of the Property Wrapper is still unfamiliar.
 </description>
    </item>
    
    <item>
      <title>How to get an alert when you tap a cell in a list in SwiftUI</title>
      <link>https://en.swiswiswift.com/2019-12-18/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://en.swiswiswift.com/2019-12-18/</guid>
      <description>How to get an alert when you tap a cell in a list in SwiftUI. I still haven&#39;t gotten used to SwiftUI yet.
 </description>
    </item>
    
    <item>
      <title>Editing a List in SwiftUI</title>
      <link>https://en.swiswiswift.com/2019-12-17/</link>
      <pubDate>Tue, 17 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://en.swiswiswift.com/2019-12-17/</guid>
      <description>Here&#39;s how to edit a list in SwiftUI. I was able to write shorter code than UITableView.
Reference: How to enable editing on a list using EditButton</description>
    </item>
    
    <item>
      <title>Using TabView to switch screens (SwiftUI)</title>
      <link>https://en.swiswiswift.com/2019-11-21/</link>
      <pubDate>Thu, 21 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://en.swiswiswift.com/2019-11-21/</guid>
      <description>Here&#39;s a sample of how to switch screens using TabView. It&#39;s pretty easy to write about, isn&#39;t it?
TabView - SwiftUI | Apple Developer Documentation</description>
    </item>
    
    <item>
      <title>Transition from one ListView to another (SwiftUI)</title>
      <link>https://en.swiswiswift.com/2019-11-20/</link>
      <pubDate>Wed, 20 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://en.swiswiswift.com/2019-11-20/</guid>
      <description>It was a bit of a hassle to transition from one ListView to another like the configuration screen.
I feel like there&#39;s a better way to do it.</description>
    </item>
    
  </channel>
</rss>